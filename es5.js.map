{"version":3,"sources":["computer.js"],"names":["express","require","bodyParser","app","use","json","urlencoded","extended","port","Datastore","computers","filename","autoload","Computer","manufacturer","processor","_manufacturer","_processor","newManufacturer","newProcessor","Ultrabook","hardDiskSize","_hardDiskSize","newHardDiskSize","get","req","res","compId","params","id","findOne","_id","err","doc","find","docs","post","computer","body","insert","put","comp","replComp","update","$set","numReplaced","delComp","remove","numDeleted","send","listen","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAME,GAAG,GAAGH,OAAO,EAAnB;AAEAG,GAAG,CAACC,GAAJ,CAAQF,UAAU,CAACG,IAAX,EAAR;AACAF,GAAG,CAACC,GAAJ,CAAQF,UAAU,CAACI,UAAX,CAAsB;AAC1BC,EAAAA,QAAQ,EAAE;AADgB,CAAtB,CAAR;AAIA,IAAMC,IAAI,GAAG,IAAb;;AAEA,IAAMC,SAAS,GAAGR,OAAO,CAAC,MAAD,CAAzB;;AACA,IAAMS,SAAS,GAAG,IAAID,SAAJ,CAAc;AAAEE,EAAAA,QAAQ,EAAE,cAAZ;AAA4BC,EAAAA,QAAQ,EAAE;AAAtC,CAAd,CAAlB;;IAEMC,Q;;;AACF,oBAAYC,YAAZ,EAA0BC,SAA1B,EAAqC;AAAA;;AACjC,SAAKC,aAAL,GAAqBF,YAArB;AACA,SAAKG,UAAL,GAAkBF,SAAlB;AACH;;;;+BAgBU;AACP,aAAO,CAAC,KAAKD,YAAN,EAAoB,KAAKC,SAAzB,CAAP;AACH;;;wBAhBkB;AACf,aAAO,KAAKC,aAAZ;AACH,K;sBACgBE,e,EAAiB;AAC9B,WAAKF,aAAL,GAAqBE,eAArB;AACH;;;wBAEe;AACZ,aAAO,KAAKD,UAAZ;AACH,K;sBACaE,Y,EAAc;AACxB,WAAKF,UAAL,GAAkBE,YAAlB;AACH;;;;;;IAOCC,S;;;;;AACF,qBAAYN,YAAZ,EAA0BC,SAA1B,EAAqCM,YAArC,EAAmD;AAAA;;AAAA;;AAC/C,mFAAMP,YAAN,EAAoBC,SAApB;AACA,UAAKO,aAAL,GAAqBD,YAArB;AAF+C;AAGlD;;;;+BASU;AACP,aAAO,0EAAmB,KAAKA,YAAxB,CAAP;AACH;;;wBATkB;AACf,aAAO,KAAKC,aAAZ;AACH,K;sBACgBC,e,EAAiB;AAC9B,WAAKD,aAAL,GAAqBC,eAArB;AACH;;;;EAXmBV,Q;;AAkBxBV,GAAG,CAACqB,GAAJ,CAAQ,gBAAR,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAIC,MAAM,GAAGF,GAAG,CAACG,MAAJ,CAAWC,EAAxB;AACAnB,EAAAA,SAAS,CAACoB,OAAV,CAAkB;AAAEC,IAAAA,GAAG,EAAEJ;AAAP,GAAlB,EAAmC,UAACK,GAAD,EAAMC,GAAN,EAAc;AAC7CD,IAAAA,GAAG,KAAK,IAAR,GAAeN,GAAG,CAACrB,IAAJ,CAAS2B,GAAT,CAAf,GAA+BN,GAAG,CAACrB,IAAJ,CAAS4B,GAAT,CAA/B;AACH,GAFD;AAGH,CALD;AAOA9B,GAAG,CAACqB,GAAJ,CAAQ,YAAR,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChChB,EAAAA,SAAS,CAACwB,IAAV,CAAe,EAAf,EAAmB,UAACF,GAAD,EAAMG,IAAN,EAAe;AAC9BH,IAAAA,GAAG,KAAK,IAAR,GAAeN,GAAG,CAACrB,IAAJ,CAAS2B,GAAT,CAAf,GAA+BN,GAAG,CAACrB,IAAJ,CAAS8B,IAAT,CAA/B;AACH,GAFD;AAGH,CAJD;AAMAhC,GAAG,CAACiC,IAAJ,CAAS,YAAT,EAAuB,UAACX,GAAD,EAAMC,GAAN,EAAc;AACjC,MAAIW,QAAQ,GAAG,IAAIxB,QAAJ,CAAaY,GAAG,CAACa,IAAJ,CAASxB,YAAtB,EAAoCW,GAAG,CAACa,IAAJ,CAASvB,SAA7C,CAAf;AACAL,EAAAA,SAAS,CAAC6B,MAAV,CAAiBF,QAAjB,EAA2B,UAACL,GAAD,EAAMC,GAAN,EAAc;AACrCD,IAAAA,GAAG,KAAK,IAAR,GAAeN,GAAG,CAACrB,IAAJ,CAAS2B,GAAT,CAAf,GAA+BN,GAAG,CAACrB,IAAJ,CAAS4B,GAAT,CAA/B;AACH,GAFD;AAGH,CALD;AAOA9B,GAAG,CAACqC,GAAJ,CAAQ,YAAR,EAAsB,UAACf,GAAD,EAAMC,GAAN,EAAc;AAChC,MAAIe,IAAI,GAAGhB,GAAG,CAACa,IAAf;AACA,MAAII,QAAQ,GAAG,EAAf;AACAhC,EAAAA,SAAS,CAACiC,MAAV,CAAiB;AAAEZ,IAAAA,GAAG,EAAEU,IAAI,CAACV;AAAZ,GAAjB,EAAoC;AAChCa,IAAAA,IAAI,EACA;AAAE5B,MAAAA,aAAa,EAAEyB,IAAI,CAACzB,aAAtB;AAAqCC,MAAAA,UAAU,EAAEwB,IAAI,CAACxB;AAAtD;AAF4B,GAApC,EAGG,EAHH,EAGO,UAACe,GAAD,EAAMa,WAAN,EAAsB;AACzB,QAAIb,GAAJ,EAAS;AACLN,MAAAA,GAAG,CAACrB,IAAJ,CAAS2B,GAAT;AACH,KAFD,MAEO;AACHtB,MAAAA,SAAS,CAACoB,OAAV,CAAkB;AAAEC,QAAAA,GAAG,EAAEU,IAAI,CAACV;AAAZ,OAAlB,EAAqC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/C,YAAID,GAAJ,EAAS;AACLN,UAAAA,GAAG,CAACrB,IAAJ,CAAS2B,GAAT;AACH,SAFD,MAEO;AACHU,UAAAA,QAAQ,GAAGT,GAAX;AACAP,UAAAA,GAAG,CAACrB,IAAJ,CAASqC,QAAT;AACH;AACJ,OAPD;AAQH;AACJ,GAhBD;AAiBH,CApBD;AAsBAvC,GAAG,UAAH,CAAW,YAAX,EAAyB,UAACsB,GAAD,EAAMC,GAAN,EAAc;AACnC,MAAIG,EAAE,GAAGJ,GAAG,CAACa,IAAJ,CAAST,EAAlB;AACA,MAAIiB,OAAO,GAAG,EAAd;AAEApC,EAAAA,SAAS,CAACoB,OAAV,CAAkB;AAAEC,IAAAA,GAAG,EAAEF;AAAP,GAAlB,EAA+B,UAACG,GAAD,EAAMC,GAAN,EAAc;AACzCD,IAAAA,GAAG,KAAK,IAAR,GAAeN,GAAG,CAACrB,IAAJ,CAAS2B,GAAT,CAAf,GAAgCc,OAAO,GAAGb,GAA1C;AACH,GAFD;AAIAvB,EAAAA,SAAS,CAACqC,MAAV,CAAiB;AAAEhB,IAAAA,GAAG,EAAEF;AAAP,GAAjB,EAA8B,UAACG,GAAD,EAAMgB,UAAN,EAAqB;AAC/ChB,IAAAA,GAAG,KAAK,IAAR,GAAeN,GAAG,CAACrB,IAAJ,CAAS2B,GAAT,CAAf,GAA+BN,GAAG,CAACrB,IAAJ,CAASyC,OAAT,CAA/B;AACH,GAFD;AAGH,CAXD;AAaA3C,GAAG,CAACqB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAcA,GAAG,CAACuB,IAAJ,CAAS,cAAT,CAAd;AAAA,CAAb;AAEA9C,GAAG,CAAC+C,MAAJ,CAAW1C,IAAX,EAAiB;AAAA,SAAM2C,OAAO,CAACC,GAAR,uCAA2C5C,IAA3C,OAAN;AAAA,CAAjB","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst app = express();\r\n\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({\r\n    extended: true\r\n}));\r\n\r\nconst port = 3000;\r\n\r\nconst Datastore = require('nedb');\r\nconst computers = new Datastore({ filename: 'computers.db', autoload: true });\r\n\r\nclass Computer {\r\n    constructor(manufacturer, processor) {\r\n        this._manufacturer = manufacturer;\r\n        this._processor = processor;\r\n    }\r\n\r\n    get manufacturer() {\r\n        return this._manufacturer;\r\n    }\r\n    set manufacturer(newManufacturer) {\r\n        this._manufacturer = newManufacturer;\r\n    }\r\n\r\n    get processor() {\r\n        return this._processor;\r\n    }\r\n    set processor(newProcessor) {\r\n        this._processor = newProcessor;\r\n    }\r\n\r\n    showInfo() {\r\n        return [this.manufacturer, this.processor];\r\n    }\r\n}\r\n\r\nclass Ultrabook extends Computer {\r\n    constructor(manufacturer, processor, hardDiskSize) {\r\n        super(manufacturer, processor);\r\n        this._hardDiskSize = hardDiskSize;\r\n    }\r\n\r\n    get hardDiskSize() {\r\n        return this._hardDiskSize;\r\n    }\r\n    set hardDiskSize(newHardDiskSize) {\r\n        this._hardDiskSize = newHardDiskSize;\r\n    }\r\n\r\n    showInfo() {\r\n        return [super.showInfo(), this.hardDiskSize];\r\n    }\r\n}\r\n\r\napp.get('/computers/:id', (req, res) => {\r\n    let compId = req.params.id;\r\n    computers.findOne({ _id: compId }, (err, doc) => {\r\n        err === true ? res.json(err) : res.json(doc);\r\n    });\r\n});\r\n\r\napp.get('/computers', (req, res) => {\r\n    computers.find({}, (err, docs) => {\r\n        err === true ? res.json(err) : res.json(docs);\r\n    });\r\n});\r\n\r\napp.post('/computers', (req, res) => {\r\n    let computer = new Computer(req.body.manufacturer, req.body.processor);\r\n    computers.insert(computer, (err, doc) => {\r\n        err === true ? res.json(err) : res.json(doc);\r\n    })\r\n});\r\n\r\napp.put('/computers', (req, res) => {\r\n    let comp = req.body;\r\n    let replComp = [];\r\n    computers.update({ _id: comp._id }, {\r\n        $set:\r\n            { _manufacturer: comp._manufacturer, _processor: comp._processor }\r\n    }, {}, (err, numReplaced) => {\r\n        if (err) {\r\n            res.json(err);\r\n        } else {\r\n            computers.findOne({ _id: comp._id }, (err, doc) => {\r\n                if (err) {\r\n                    res.json(err);\r\n                } else {\r\n                    replComp = doc;\r\n                    res.json(replComp);\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\napp.delete('/computers', (req, res) => {\r\n    let id = req.body.id;\r\n    let delComp = [];\r\n\r\n    computers.findOne({ _id: id }, (err, doc) => {\r\n        err === true ? res.json(err) : (delComp = doc);\r\n    });\r\n\r\n    computers.remove({ _id: id }, (err, numDeleted) => {\r\n        err === true ? res.json(err) : res.json(delComp);\r\n    });\r\n});\r\n\r\napp.get('/', (req, res) => res.send('Hello World!'));\r\n\r\napp.listen(port, () => console.log(`Server is listening on port ${port}!`));"],"file":"es5.js"}